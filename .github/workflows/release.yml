
name: Release

# References:
# - https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  APP_NAME: vscli

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-24.04
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Get release version
        if: env.VERSION == ''
        run: |
          # Get the version from github tag
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Version: ${{ env.VERSION }}"

      - name: Create release
        id: release
        uses: mikepenz/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ env.VERSION }}
          draft: true
          generate_release_notes: true

  build-release:
    name: Build release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # Build tool. For some builds this can be cross.
      CARGO: cargo
      # When `CARGO` is set to `cross` this will be set to `--target {{matrix.target}}`.
      TARGET_FLAGS: ""
      # When `CARGO` is set to `cross` this will be set to `./target/{{matrix.target}}`.
      TARGET_DIR: ./target
      # Get backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-latest
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
        - build: macos-arm
          os: macos-latest
          target: aarch64-apple-darwin
        - build: win32-msvc
          os: windows-latest
          target: i686-pc-windows-msvc
        - build: win-msvc
          os: windows-latest
          target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Cross
        if: matrix.target != ''
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary without features
        run: ${{ env.CARGO }} build --release --verbose ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux)
        if: matrix.build == 'linux' || matrix.os == 'macos'
        run: strip "${{ env.TARGET_DIR }}/release/${{ env.APP_NAME }}"

      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            /target/arm-unknown-linux-gnueabihf/release/${{ env.APP_NAME }}

      - name: Build archive
        run: |
          staging="${{ env.APP_NAME }}-${{ matrix.target }}"
          mkdir -p "$staging"

          if [[ "${{ matrix.os }}" = "windows-latest" ]]; then
            echo "Archiving windows build"
            cp "${{ env.TARGET_DIR }}/release/${{ env.APP_NAME }}.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            echo "Archiving unix build"
            cp "${{ env.TARGET_DIR }}/release/${{ env.APP_NAME }}" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload archive
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
